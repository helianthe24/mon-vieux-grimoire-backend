// Script de test simple pour v√©rifier l'API
const axios = require('axios')

const BASE_URL = 'http://localhost:4000'

async function testAPI() {
  console.log("üß™ Test de l'API Mon Vieux Grimoire\n")

  try {
    // Test 1: V√©rifier que l'API r√©pond
    console.log("1. Test de connexion √† l'API...")
    const healthResponse = await axios.get(`${BASE_URL}/`)
    console.log('‚úÖ API accessible:', healthResponse.data.message)

    // Test 2: V√©rifier la route health
    console.log('\n2. Test de la route health...')
    const healthCheck = await axios.get(`${BASE_URL}/api/health`)
    console.log('‚úÖ Health check:', healthCheck.data)

    // Test 3: R√©cup√©rer tous les livres (devrait √™tre vide au d√©but)
    console.log('\n3. Test r√©cup√©ration des livres...')
    const booksResponse = await axios.get(`${BASE_URL}/api/books`)
    console.log('‚úÖ Livres r√©cup√©r√©s:', booksResponse.data.length, 'livre(s)')

    // Test 4: Test inscription
    console.log('\n4. Test inscription utilisateur...')
    const signupData = {
      email: `test${Date.now()}@example.com`,
      password: 'motdepasse123',
    }

    try {
      const signupResponse = await axios.post(
        `${BASE_URL}/api/auth/signup`,
        signupData
      )
      console.log('‚úÖ Inscription r√©ussie:', signupResponse.data.message)

      // Test 5: Test connexion
      console.log('\n5. Test connexion utilisateur...')
      const loginResponse = await axios.post(
        `${BASE_URL}/api/auth/login`,
        signupData
      )
      console.log('‚úÖ Connexion r√©ussie:', loginResponse.data.message)

      const token = loginResponse.data.token
      console.log('‚úÖ Token JWT re√ßu')

      // Test 6: Test route prot√©g√©e (cr√©er un livre sans image)
      console.log("\n6. Test cr√©ation d'un livre...")
      const bookData = {
        title: 'Livre de Test',
        author: 'Auteur Test',
        year: 2024,
        genre: 'Test',
      }

      const createBookResponse = await axios.post(
        `${BASE_URL}/api/books`,
        bookData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      )
      console.log('‚úÖ Livre cr√©√©:', createBookResponse.data.book.title)

      const bookId = createBookResponse.data.book._id

      // Test 7: Test notation du livre
      console.log('\n7. Test notation du livre...')
      const ratingData = { grade: 4 }
      const ratingResponse = await axios.post(
        `${BASE_URL}/api/books/${bookId}/rating`,
        ratingData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      )
      console.log('‚úÖ Note ajout√©e:', ratingResponse.data.book.averageRating)

      // Test 8: Test r√©cup√©ration du livre
      console.log('\n8. Test r√©cup√©ration du livre cr√©√©...')
      const getBookResponse = await axios.get(`${BASE_URL}/api/books/${bookId}`)
      console.log('‚úÖ Livre r√©cup√©r√©:', getBookResponse.data.title)

      console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !')
    } catch (authError) {
      if (
        authError.response?.status === 400 &&
        authError.response?.data?.message?.includes('existe d√©j√†')
      ) {
        console.log("‚ö†Ô∏è Utilisateur existe d√©j√†, test d'inscription ignor√©")
      } else {
        throw authError
      }
    }
  } catch (error) {
    console.error(
      '‚ùå Erreur lors du test:',
      error.response?.data || error.message
    )
    process.exit(1)
  }
}

// V√©rifier si axios est install√©
try {
  require('axios')
} catch (error) {
  console.log("üì¶ Installation d'axios pour les tests...")
  const { execSync } = require('child_process')
  execSync('npm install axios', { stdio: 'inherit' })
}

testAPI()
